import time
import matplotlib.pyplot as plt
import numpy as np
import timeit
"""
Initially I started with a recursive approach as it seemed like the simplest solution, 
but I used too much memory with that approach. Since the only necessary values are the two previous,
it makes more sense to go with an iterative solution where only the two previous values are saved.

Space: O(1)
Time: O(n)
Please see the runtime.png file located in the src directory for a visualization, or feel free to run the code below.

The output of sequence(10000) is:

"""
def sequence(n):
    if n == 1:
        return 1
    if n == 2:
        return 2
    minusOne = 2
    minusTwo = 1
    result = 0
    for i in range(3, n + 1):
        if i % 2 == 0:
            result = minusOne + minusTwo
        else: 
            result = 2 * minusOne - minusTwo
        minusTwo = minusOne
        minusOne = result
    return result

print(f"The layup sequence for 10000 is {sequence(10000)}")


n_values = np.linspace(100, 10000, num=1000, dtype=int) 
runtimes = []

for n in n_values:
    runtime = timeit.timeit(lambda: sequence(n), number=10) / 10  # Averaging over 10 runs
    runtimes.append(runtime)

# Reference O(n) line
linear_runtime = (max(runtimes) / max(n_values)) * n_values


# Plot runtime
plt.figure(figsize=(10, 5))
plt.plot(n_values, runtimes, marker='o', linestyle='-', label="Measured Runtime")
plt.plot(n_values, linear_runtime, linestyle="--", color="red", label="O(n) Reference Line")
plt.xlabel("n")
plt.ylabel("Runtime (seconds)")
plt.title("Runtime of Layup Sequence Function")
plt.legend()
plt.grid(True)
plt.show()

